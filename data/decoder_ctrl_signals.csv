,,,,,Decoder Control Signals,,,,,,,,
INSTRUCTION,TYPE,OPCODE,FUNCT3,FUNCT7/IMM,pc_sel,AluFun,Op2Sel,Op1Sel,wb_sel,rf_wen,mem_rw,mem_val,OPERATION
"add rd, rs1, rs2",R,0x33,0x0,0x00,0,5,0,0,1,1,0,xx,R[rd] ← R[rs1] + R[rs2]
"mul rd, rs1, rs2",,,0x0,0x01,0,c,0,0,1,1,0,xx,R[rd] ← (R[rs1] * R[rs2])[31:0]
"sub rd, rs1, rs2",,,0x0,0x20,0,8,0,0,1,1,0,xx,R[rd] ← R[rs1] - R[rs2]
"sll rd, rs1, rs2",,,0x1,0x00,0,a,0,0,1,1,0,xx,R[rd] ← R[rs1] << R[rs2
"mulh rd, rs1, rs2",,,0x1,0x01,0,c,0,0,1,1,0,xx,R[rd] ← (R[rs1] * R[rs2])[63:32]
"slt rd, rs1, rs2",,,0x2,0x00,0,6,0,0,1,1,0,xx,R[rd] ← (R[rs1] < R[rs2]) ? 1 : 0
"sltu rd, rs1, rs2",,,0x3,0x00,0,3,0,0,1,1,0,xx,--
"xor rd, rs1, rs2",,,0x4,0x00,0,1,0,0,1,1,0,xx,R[rd] ← R[rs1] ^ R[rs2]
"div rd, rs1, rs2",,,0x4,0x01,0,d,0,0,1,1,0,xx,R[rd] ← R[rs1] / R[rs2]
"srl rd, rs1, rs2",,,0x5,0x00,0,9,0,0,1,1,0,xx,R[rd] ← R[rs1] >> R[rs2]
"sra rd, rs1, rs2",,,0x5,0x20,0,7,0,0,1,1,0,xx,R[rd] ← R[rs1] >> R[rs2]
"or rd, rs1, rs2",,,0x6,0x00,0,b,0,0,1,1,0,xx,R[rd] ← R[rs1] | R[rs2]
"rem rd, rs1, rs2",,,0x6,0x01,0,d,0,0,1,1,0,xx,R[rd] ← (R[rs1] % R[rs2]
"and rd, rs1, rs2",,,0x7,0x00,0,4,0,0,1,1,0,xx,R[rd] ← R[rs1] & R[rs2]
"lb rd, offset(rs1)",I,0x03,0x0,,0,5,2,0,0,1,0,1,"R[rd] ← SignExt(Mem(R[rs1] + offset, byte))"
"lbu rd, offset(rs1)",,,0x4,,0,5,2,0,0,1,0,1,--
"lh rd, offset(rs1)",,,0x1,,0,5,2,0,0,1,0,2,"R[rd] ← SignExt(Mem(R[rs1] + offset, half))"
"lhu rd, offset(rs1)",,,0x5,,0,5,2,0,0,1,0,2,--
"lw rd, offset(rs1)",,,0x2,,0,5,2,0,0,1,0,4,"R[rd] ← Mem(R[rs1] + offset, word)"
"addi rd, rs1, imm",,0x13,0x0,,0,5,2,0,1,1,0,xx,R[rd] ← R[rs1] + imm
"slli rd, rs1, imm",,,0x1,0x00,0,a,2,0,1,1,0,xx,R[rd] ← R[rs1] << imm
"slti rd, rs1, imm",,,0x2,,0,6,2,0,1,1,0,xx,R[rd] ← (R[rs1] < imm) ? 1 : 0
"sltiu rd, rs1, imm",,,0x3,,0,3,2,0,1,1,0,xx,--
"xori rd, rs1, imm",,,0x4,,0,1,2,0,1,1,0,xx,R[rd] ← R[rs1] ^ imm
"srli rd, rs1, imm",,,0x5,0x00,0,9,2,0,1,1,0,xx,R[rd] ← R[rs1] >> imm
"srai rd, rs1, imm",,,0x5,0x20,0,7,2,0,1,1,0,xx,R[rd] ← R[rs1] >> imm
"ori rd, rs1, imm",,,0x6,,0,b,2,0,1,1,0,xx,R[rd] ← R[rs1] | imm
"andi rd, rs1, imm",,,0x7,,0,4,2,0,1,1,0,xx,R[rd] ← R[rs1] & imm
ecall,,0x73,0x0,0x000,0,0,0,0,0,0,0,xx,"(Transfers control to operating system) 
a0 = 1 is print value of a1 as an integer. 
a0 = 10 is exit or end of code indicator."
"sb rs2, offset(rs1)",S,0x23,0x0,,0,5,1,0,xx,0,1,1,Mem(R[rs1] + offset) ← R[rs2][7:0]
"sh rs2, offset(rs1)",,,0x1,,0,5,1,0,xx,0,1,2,Mem(R[rs1] + offset) ← R[rs2][15:0]
"sw rs2, offset(rs1)",,,0x2,,0,5,1,0,xx,0,1,4,Mem(R[rs1] + offset) ← R[rs2]
"beq rs1, rs2, offset",SB,0x63,0x0,,xx,0,0,0,0,0,0,xx,"if(R[rs1] == R[rs2]) 
 PC ← PC + {offset, 1b'0}"
"bne rs1, rs2, offset",,,0x1,,xx,0,0,0,0,0,0,xx,"if(R[rs1] != R[rs2]) 
 PC ← PC + {offset, 1b'0}"
"blt rs1, rs2, offset",SB,0x63,0x4,,xx,0,0,0,0,0,0,xx,--
"bge rs1, rs2, offset",SB,x63,0x5,,xx,0,0,0,0,0,0,xx,--
"bgeu rs1, rs2, offset",SB,0x63,0x7,,xx,0,0,0,0,0,0,xx,--
"bltu rs1, rs2, offset",SB,0x63,0x6,,xx,0,0,0,0,0,0,xx,--
"lui rd, offset",U,0x37,,,0,2,xx,1,1,1,0,xx,"R[rd] ← {offset, 12b'0}"
"auipc rd, imm",U,0x17,,,0,5,3,1,1,1,0,xx,--
"jal rd, imm",UJ,0x6f,,,3,0,0,0,2,1,0,xx,"R[rd] ← PC + 4 
PC ← PC + {imm, 1b'0}"
"jalr rd, rs1, imm",I,0x67,0x0,,1,0,0,0,2,1,0,xx,
,,,,,,,,,,,,Note regarding all bolded values in the mem_val column,
,,,,,,,,,,,,ALU Function Value (AluFun),ALU operation
,,,,,,,,,,,,"0
1
2
3
4
5
6
7
8
9
10
11","0 (no operation)
Xor
Copy (input 1 is copied to output)
Sltu (shift left unsigned)
And
Add
Slt (set less than)
Sra (shift right arithmetic)
Sub
Srl (shift right logical)
Sll (shift left logical)
Or"